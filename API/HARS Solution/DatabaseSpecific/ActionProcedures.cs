//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace HARS.Application.LLBL.DatabaseSpecific
{
	/// <summary>Class which contains the static logic to execute action stored procedures in the database.</summary>
	public static partial class ActionProcedures
	{
		/// <summary>Delegate definition for stored procedure 'SpBranchTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpBranchTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpCustomerTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpCustomerTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpDepartmentTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpDepartmentTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpProductTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpProductTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpStoreTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpStoreTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpUserTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpUserTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);

		/// <summary>Calls stored procedure 'SpBranchTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBranchTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpBranchTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpBranchTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBranchTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpBranchTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBranchTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpBranchTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpBranchTskResult> SpBranchTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpBranchTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBranchTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpBranchTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpBranchTskResult> SpBranchTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpBranchTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpBranchTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpCustomerTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpCustomerTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCustomerTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCustomerTskResult> SpCustomerTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpCustomerTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCustomerTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCustomerTskResult> SpCustomerTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpCustomerTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpCustomerTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpDepartmentTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpDepartmentTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpDepartmentTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpDepartmentTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpDepartmentTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpDepartmentTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpDepartmentTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpDepartmentTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpDepartmentTskResult> SpDepartmentTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpDepartmentTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpDepartmentTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpDepartmentTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpDepartmentTskResult> SpDepartmentTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpDepartmentTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpDepartmentTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpProductTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpProductTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpProductTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpProductTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpProductTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpProductTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpProductTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpProductTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpProductTskResult> SpProductTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpProductTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpProductTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpProductTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpProductTskResult> SpProductTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpProductTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpProductTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpStoreTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpStoreTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpStoreTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpStoreTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpStoreTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpStoreTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpStoreTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpStoreTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpStoreTskResult> SpStoreTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpStoreTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpStoreTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpStoreTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpStoreTskResult> SpStoreTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpStoreTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpStoreTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpUserTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpUserTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpUserTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpUserTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpUserTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpUserTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpUserTskResult> SpUserTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpUserTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpUserTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpUserTskResult> SpUserTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpUserTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpUserTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Creates the call object for the call 'SpBranchTsk' to stored procedure 'SpBranchTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpBranchTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Sahas_SalesTransaction].[dbo].[SpBranchTsk]", "SpBranchTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpCustomerTsk' to stored procedure 'SpCustomerTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpCustomerTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Sahas_SalesTransaction].[dbo].[SpCustomerTsk]", "SpCustomerTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpDepartmentTsk' to stored procedure 'SpDepartmentTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpDepartmentTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Sahas_SalesTransaction].[dbo].[SpDepartmentTsk]", "SpDepartmentTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpProductTsk' to stored procedure 'SpProductTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpProductTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Sahas_SalesTransaction].[dbo].[SpProductTsk]", "SpProductTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpStoreTsk' to stored procedure 'SpStoreTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpStoreTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Sahas_SalesTransaction].[dbo].[SpStoreTsk]", "SpStoreTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpUserTsk' to stored procedure 'SpUserTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpUserTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Sahas_SalesTransaction].[dbo].[SpUserTsk]", "SpUserTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}


		/// <summary>Return value struct for the async method SpBranchTskAsync().</summary>
		public struct SpBranchTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpCustomerTskAsync().</summary>
		public struct SpCustomerTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpDepartmentTskAsync().</summary>
		public struct SpDepartmentTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpProductTskAsync().</summary>
		public struct SpProductTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpStoreTskAsync().</summary>
		public struct SpStoreTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpUserTskAsync().</summary>
		public struct SpUserTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

	}
}
